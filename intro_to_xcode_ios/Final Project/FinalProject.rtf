{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red0\green0\blue0;\red0\green116\blue0;
\red28\green0\blue207;\red196\green26\blue22;\red92\green38\blue153;\red63\green110\blue116;\red46\green13\blue110;
\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c0\c45600\c0;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c14900\c27800\c29400;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 import\cf3  UIKit\
\cf4 //filter for 25 percnet contrast\
\cf2 struct\cf3  filter1\{\
    \cf4 //percent contrast\
\cf3     \cf2 var\cf3  red = \cf5 0.75\cf3 \
    \cf2 var\cf3  blue = \cf5 0.75\cf3 \
    \cf2 var\cf3  green = \cf5 0.75\cf3 \
    \
\}\
\cf4 //filter for 50 percent contrast\
\cf2 struct\cf3  filter2\{\
    \cf4 //percent contrast\
\cf3     \cf2 var\cf3  red = \cf5 0.5\cf3 \
    \cf2 var\cf3  blue = \cf5 0.5\cf3 \
    \cf2 var\cf3  green = \cf5 0.5\cf3 \
\
\}\
\cf4 //filter for 75 percent contrast\
\cf2 struct\cf3  filter3\{\
    \cf2 var\cf3  red = \cf5 0.25\cf3 \
    \cf2 var\cf3  blue = \cf5 0.25\cf3 \
    \cf2 var\cf3  green = \cf5 0.25\cf3 \
\}\
\cf4 // struct to hold all of the different filter options\
\cf2 struct\cf3  filterOptions\{\
    \cf2 let\cf3  f1 = \cf6 "25 percent contrast"\cf3 \
    \cf2 let\cf3  f2 = \cf6 "50 percent contrast"\cf3 \
    \cf2 let\cf3  f3 = \cf6 "75 percent contrast"\cf3 \
    \cf2 let\cf3  f4 = \cf6 "grayscale"\cf3 \
    \cf2 let\cf3  f5 = \cf6 "randomRed"\cf3 \
    \cf2 let\cf3  f6 = \cf6 "randomBlue"\cf3 \
    \cf2 let\cf3  f7 = \cf6 "randGreen"\cf3 \
\}\
\
\
\cf4 //ImageProcessor class to create an modify an image\
\cf2 class\cf3  ImageProcessor\{\
    \cf2 var\cf3  red: \cf7 Int\cf3 \
    \cf2 var\cf3  avgRed:\cf7 Int\cf3 \
    \cf2 var\cf3  blue: \cf7 Int\cf3 \
    \cf2 var\cf3  avgBlue: \cf7 Int\cf3 \
    \cf2 var\cf3  green: \cf7 Int\cf3 \
    \cf2 var\cf3  avgGreen: \cf7 Int\cf3 \
      \cf2 init\cf3 ()\{\
        \cf8 red\cf3  = \cf5 0\cf3 \
        \cf8 avgRed\cf3  = \cf5 0\cf3 \
        \cf8 blue\cf3  = \cf5 0\cf3 \
        \cf8 avgBlue\cf3  = \cf5 0\cf3 \
        \cf8 green\cf3  = \cf5 0\cf3 \
        \cf8 avgGreen\cf3  = \cf5 0\cf3 \
    \}\
    \cf4 //process the image: Gather all the pixal info\
\cf3     \cf2 func\cf3  processImage(image: \cf7 UIImage\cf3 )\{\
        \cf2 var\cf3  myRGBA = \cf8 RGBAImage\cf3 (image: image)!\
        \cf2 var\cf3  totalRed = \cf5 0\cf3 \
        \cf2 var\cf3  totalGreen = \cf5 0\cf3 \
        \cf2 var\cf3  totalBlue = \cf5 0\cf3 \
        \cf2 for\cf3  y \cf2 in\cf3  \cf5 0\cf3 ..<myRGBA.\cf8 height\cf3 \{\
            \cf2 for\cf3  x \cf2 in\cf3  \cf5 0\cf3 ..<myRGBA.\cf8 width\cf3 \{\
                \cf2 let\cf3  index = y * myRGBA.\cf8 width\cf3  + x\
                \cf2 var\cf3  pixel = myRGBA.\cf8 pixels\cf3 [index]\
                totalRed+=\cf7 Int\cf3 (pixel.\cf8 red\cf3 )\
                totalGreen+=\cf7 Int\cf3 (pixel.\cf8 green\cf3 )\
                totalBlue+=\cf7 Int\cf3 (pixel.\cf8 blue\cf3 )\
            \
            \}\
        \}\
        \cf4 //compute statistics on the pixal info\
\cf3         \cf2 let\cf3  count = (myRGBA.\cf8 width\cf3 ) * (myRGBA.\cf8 height\cf3 )\
        \cf8 avgRed\cf3  = totalRed/count\
        \cf8 avgGreen\cf3  = totalGreen/count\
        \cf8 avgBlue\cf3  = totalBlue/count\
    \}\
    \cf4 //filter the image according the specfied filter option\
\cf3     \cf2 func\cf3  filterImage(image: \cf7 UIImage\cf3 , filterOption: \cf7 String\cf3 )->\cf8 RGBAImage\cf3 \{\
        \cf2 var\cf3  myRGBA = \cf8 RGBAImage\cf3 (image: image)!\
        \cf2 let\cf3  f = \cf8 filterOptions\cf3 ()\
        \cf2 for\cf3  y \cf2 in\cf3  \cf5 0\cf3 ..<myRGBA.\cf8 height\cf3 \{\
            \cf2 for\cf3  x \cf2 in\cf3  \cf5 0\cf3 ..<myRGBA.\cf8 width\cf3 \{\
                \cf2 let\cf3  index = y * myRGBA.\cf8 width\cf3  + x\
                \cf2 var\cf3  pixel = myRGBA.\cf8 pixels\cf3 [index]\
                \cf2 let\cf3  redDiff = \cf7 Int\cf3 (pixel.\cf8 red\cf3 )-\cf8 avgRed\cf3 \
                \cf2 let\cf3  greenDiff = \cf7 Int\cf3 (pixel.\cf8 green\cf3 )-\cf8 avgGreen\cf3 \
                \cf2 let\cf3  blueDiff = \cf7 Int\cf3 (pixel.\cf8 blue\cf3 )-\cf8 avgBlue\cf3 \
                    \cf2 switch\cf3  (filterOption) \{\
                    \cf2 case\cf3  f.\cf8 f1\cf3 :\cf4 //"25 percent"\
\cf3                         \cf2 let\cf3  f1 = \cf8 filter1\cf3 ()\
                        \cf2 let\cf3  red = \cf7 Double\cf3 (pixel.\cf8 red\cf3 ) * \cf7 Double\cf3 (f1.\cf8 red\cf3 )\
                        \cf2 let\cf3  blue = \cf7 Double\cf3 (pixel.\cf8 blue\cf3 ) * \cf7 Double\cf3 (f1.\cf8 blue\cf3 )\
                        \cf2 let\cf3  green = \cf7 Double\cf3 (pixel.\cf8 green\cf3 ) * \cf7 Double\cf3 (f1.\cf8 green\cf3 )\
                        pixel.\cf8 red\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,red)))\
                        pixel.\cf8 green\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,green)))\
                        pixel.\cf8 blue\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,blue)))\
                        myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \cf2 break\cf3 ;\
                    \cf2 case\cf3  f.\cf8 f2\cf3 :\cf4 //"50 percent"\
\cf3                         \cf2 let\cf3  f2 = \cf8 filter2\cf3 ()\
                        \cf2 let\cf3  red = \cf7 Double\cf3 (pixel.\cf8 red\cf3 ) * \cf7 Double\cf3 (f2.\cf8 red\cf3 )\
                        \cf2 let\cf3  blue = \cf7 Double\cf3 (pixel.\cf8 blue\cf3 ) * \cf7 Double\cf3 (f2.\cf8 blue\cf3 )\
                        \cf2 let\cf3  green = \cf7 Double\cf3 (pixel.\cf8 green\cf3 ) * \cf7 Double\cf3 (f2.\cf8 green\cf3 )\
                        pixel.\cf8 red\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,red)))\
                        pixel.\cf8 green\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,green)))\
                        pixel.\cf8 blue\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,blue)))\
                        myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \cf2 break\cf3 ;\
                    \cf2 case\cf3  f.\cf8 f3\cf3 :\cf4 //"75 percent"\
\cf3                         \cf2 let\cf3  f3 = \cf8 filter3\cf3 ()\
                        \cf2 let\cf3  red = \cf7 Double\cf3 (pixel.\cf8 red\cf3 ) * \cf7 Double\cf3 (f3.\cf8 red\cf3 )\
                        \cf2 let\cf3  blue = \cf7 Double\cf3 (pixel.\cf8 blue\cf3 ) * \cf7 Double\cf3 (f3.\cf8 blue\cf3 )\
                        \cf2 let\cf3  green = \cf7 Double\cf3 (pixel.\cf8 green\cf3 ) * \cf7 Double\cf3 (f3.\cf8 green\cf3 )\
                        pixel.\cf8 red\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,red)))\
                        pixel.\cf8 green\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,green)))\
                        pixel.\cf8 blue\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,blue)))\
                        myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \cf2 break\cf3 ;\
                    \cf2 case\cf3  f.\cf8 f4\cf3 :\cf4 //"grayscale"\
\cf3                         \cf2 let\cf3  gray = \cf5 0.299\cf3  * \cf7 Double\cf3 (pixel.\cf8 red\cf3 ) + \cf5 0.587\cf3  * \cf7 Double\cf3 (pixel.\cf8 green\cf3 ) + \cf5 0.114\cf3  * \cf7 Double\cf3 (pixel.\cf8 blue\cf3 )\
                        \cf2 let\cf3  grayFinal = \cf9 round\cf3 (gray)\
                        pixel.\cf8 red\cf3  = \cf7 UInt8\cf3 (grayFinal)\
                        pixel.\cf8 green\cf3  = \cf7 UInt8\cf3 (grayFinal)\
                        pixel.\cf8 blue\cf3  = \cf7 UInt8\cf3 (grayFinal)\
                        myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \cf2 break\cf3 ;\
                    \cf2 case\cf3  f.\cf8 f5\cf3 :\cf4 //"randomRed"\
\cf3                         \cf2 let\cf3  rand = \cf7 Double\cf3 (\cf9 arc4random_uniform\cf3 (\cf5 100\cf3 ))/\cf5 100\cf3 \
                        \cf2 if\cf3 (redDiff>\cf5 0\cf3 )\{\
                            pixel.\cf8 red\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,(\cf7 UInt8\cf3 (\cf8 avgRed\cf3 )+\cf7 UInt8\cf3 (redDiff))*(\cf7 UInt8\cf3 (rand)))))\
                            myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \}\
                    \cf2 case\cf3  f.\cf8 f6\cf3 :\cf4 //"randomBlue"\
\cf3                         \cf2 let\cf3  rand = \cf7 Double\cf3 (\cf9 arc4random_uniform\cf3 (\cf5 100\cf3 ))/\cf5 100\cf3 \
                        \cf2 if\cf3 (blueDiff>\cf5 0\cf3 )\{\
                            pixel.\cf8 blue\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,(\cf7 UInt8\cf3 (\cf8 avgBlue\cf3 )+\cf7 UInt8\cf3 (blueDiff))*(\cf7 UInt8\cf3 (rand)))))\
                            myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \}\
                    \cf2 case\cf3  f.\cf8 f7\cf3 :\cf4 //"randomGreen"\
\cf3                         \cf2 let\cf3  rand = \cf7 Double\cf3 (\cf9 arc4random_uniform\cf3 (\cf5 100\cf3 ))/\cf5 100\cf3 \
                        \cf2 if\cf3 (greenDiff>\cf5 0\cf3 )\{\
                            pixel.\cf8 green\cf3  = \cf7 UInt8\cf3 (\cf9 max\cf3 (\cf5 0\cf3 ,\cf9 min\cf3 (\cf5 255\cf3 ,(\cf7 UInt8\cf3 (\cf8 avgGreen\cf3 )+\cf7 UInt8\cf3 (greenDiff))*(\cf7 UInt8\cf3 (rand)))))\
                            myRGBA.\cf8 pixels\cf3 [index]=pixel\
                        \}\
                    \cf2 default\cf3 : \cf9 print\cf3 (\cf6 "No Such Case"\cf3 )\
                    \}\cf4 //end switch\
\cf3             \}\cf4 //end inner for\
\cf3         \}\cf4 //end outer for\
\cf3         \cf2 return\cf3  myRGBA\
    \}\cf4 //end setFilter\
\cf3 \}\cf4 //end class ImageProcessor\
\cf2 var\cf3  my_image = \cf7 UIImage\cf3 (named: \cf6 "sample"\cf3 )!\
\cf2 var\cf3  imageRGBA1 = \cf8 RGBAImage\cf3 (image:\cf8 my_image\cf3 )\
\cf8 imageRGBA1\cf3 ?.\cf10 toUIImage\cf3 ()\
\cf2 var\cf3  ip = \cf8 ImageProcessor\cf3 ()\
\cf8 ip\cf3 .\cf10 processImage\cf3 (\cf8 my_image\cf3 )\
\cf4 /************************\
 Filter Options\
 \
 f1 = "25 percent contrast"\
 f2 = "50 percent contrast"\
 f3 = "75 percent contrast"\
 f4 = "grayscale"\
 f5 = "randomRed"\
 f6 = "randomBlue"\
 f7 = "randomGreen"\
 \
 **************************/\cf3 \
\cf2 let\cf3  f = \cf8 filterOptions\cf3 ()\
\cf2 var\cf3  imageRGBA2 = \cf8 ip\cf3 .\cf10 filterImage\cf3 (\cf8 my_image\cf3 , filterOption: \cf8 f\cf3 .\cf8 f7\cf3 ) \cf4 //<-- Change the option here\
\cf8 imageRGBA2\cf3 .\cf10 toUIImage\cf3 ()\
\
}